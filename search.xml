<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog优化-1</title>
    <url>/2023/07/21/blog%E4%BC%98%E5%8C%96-1/</url>
    <content><![CDATA[<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>安装<font color="blue" size=2>hexo-generator-searchdb</font> 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在hexo的<font color="blue" size=2>_config.yml</font>的底部添加如下设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
<p>在next的<font color="blue" size=2>_config.yml</font>打开搜索功能</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>部分浏览器不支持local search</p>
<h3 id="添加可切换白天-x2F-黑夜模式"><a href="#添加可切换白天-x2F-黑夜模式" class="headerlink" title="添加可切换白天&#x2F;黑夜模式"></a>添加可切换白天&#x2F;黑夜模式</h3><p>安装 <font color="blue" size=2>hexo-next-darkmode</font> 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-next-darkmode --save</span><br></pre></td></tr></table></figure>
<p>在 Next 主题的 <font color="blue" size=2>_config.yml</font> 配置文件里添加以下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Darkmode JS</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.js</span></span><br><span class="line"><span class="attr">darkmode_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">&#x27;64px&#x27;</span> <span class="comment"># default: &#x27;32px&#x27;</span></span><br><span class="line">  <span class="attr">right:</span> <span class="string">&#x27;unset&#x27;</span> <span class="comment"># default: &#x27;32px&#x27;</span></span><br><span class="line">  <span class="attr">left:</span> <span class="string">&#x27;32px&#x27;</span> <span class="comment"># default: &#x27;unset&#x27;</span></span><br><span class="line">  <span class="attr">time:</span> <span class="string">&#x27;0.5s&#x27;</span> <span class="comment"># default: &#x27;0.3s&#x27;</span></span><br><span class="line">  <span class="attr">mixColor:</span> <span class="string">&#x27;transparent&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">backgroundColor:</span> <span class="string">&#x27;transparent&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">buttonColorDark:</span> <span class="string">&#x27;#100f2c&#x27;</span> <span class="comment"># default: &#x27;#100f2c&#x27;</span></span><br><span class="line">  <span class="attr">buttonColorLight:</span> <span class="string">&#x27;#fff&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">isActivated:</span> <span class="literal">false</span> <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">saveInCookies:</span> <span class="literal">true</span> <span class="comment"># default: true</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">&#x27;🌓&#x27;</span> <span class="comment"># default: &#x27;&#x27;</span></span><br><span class="line">  <span class="attr">autoMatchOsTheme:</span> <span class="literal">true</span> <span class="comment"># default: true</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="comment"># Set custom library cdn url for Darkmode.js</span></span><br></pre></td></tr></table></figure>
<p>关闭原生的暗黑模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">darkmode: false</span><br></pre></td></tr></table></figure>
<h3 id="添加canvas-nest-线条动画"><a href="#添加canvas-nest-线条动画" class="headerlink" title="添加canvas_nest(线条动画)"></a>添加canvas_nest(线条动画)</h3><p> 在next的<font color="blue" size=2>_config.yml</font>文件中插入<br> <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br> 在next的<font color="blue" size=2>layout\_layout.njk</font>文件中的body中加入(40行后)<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;%- include &#x27;_third-party/math/index.njk&#x27; -%&#125;</span><br><span class="line">&#123;%- include &#x27;_third-party/quicklink.njk&#x27; -%&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h3><p>选择样式<a href="https://link.jianshu.com/?t=https://github.com/blog/273-github-ribbons">GitHub Ribbons</a></p>
<p>复制文本框中的代码打开next主题的layout&#x2F;下的_layout.njk文件，把代码复制到<font color="red">&lt;div class&#x3D;”headband”&gt;&lt;&#x2F;div&gt;</font>下面，代码中的href修改为自己的GitHub。</p>
<h3 id="边框与文章边框阴影"><a href="#边框与文章边框阴影" class="headerlink" title="边框与文章边框阴影"></a>边框与文章边框阴影</h3><p>边框设置，在blog的根目录下的source文件夹下新建_data文件夹，并且新建<font color=blue size=3>styles.styl</font>,在其中输入</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文章背板的颜色rgb</span></span><br><span class="line"><span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.sub-menu</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.post-block</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.tabs-comment</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.comments</span>, <span class="selector-class">.main-inner</span> &gt; .pagination&#123;</span><br><span class="line">	<span class="attribute">background</span>: (<span class="number">233</span>,<span class="number">233</span>,<span class="number">233</span>,<span class="number">0.6</span>);		<span class="comment">//此处使用十六进制颜色代码，			也可以使用rgba进行调色，</span></span><br><span class="line">    							<span class="comment">//实际效果为白色透明色底板				rgba的第四参数即为透明度</span></span><br><span class="line">&#125;</span><br><span class="line">body&#123;				<span class="comment">//修改主体字体颜色</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;		<span class="comment">//纯黑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title-link</span> &#123;	<span class="comment">//标题颜色</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;				<span class="comment">//首页文章标题颜色， （默认为灰辨识度不高）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta-container</span> &#123;	<span class="comment">//标题下的日期颜色</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#880000</span>;				<span class="comment">//此处修改为红色，可自行调用rgb调色</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//菜单栏的调色</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;		</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索框透明</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;		</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);  <span class="comment">//主体背景透明</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">40px</span> <span class="number">40px</span> <span class="number">40px</span>;  <span class="comment">//调整组件位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>边框阴影设置：打开next主题下的<font color=blue size=3>source\css_common\components\post\index.styl</font></p>
<p><font size=1>我的文件地址：myblog\node_modules\hexo-theme-next\source\css_common\components\post\index.styl</font></p>
<p>替换.use-motion下的.post-block为</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">.post-block&#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden; </span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">60px</span>; </span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">60px</span>; </span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">0.8</span>);</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>blog创建</title>
    <url>/2023/07/14/blog%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="打开下载好的theme下的config文件，关闭注释"><a href="#打开下载好的theme下的config文件，关闭注释" class="headerlink" title="打开下载好的theme下的config文件，关闭注释"></a>打开下载好的theme下的config文件，关闭注释</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap  # 站点地址</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat    # 公共福利</span></span><br></pre></td></tr></table></figure>
<h3 id="用git-bash打开文件夹myblog输入"><a href="#用git-bash打开文件夹myblog输入" class="headerlink" title="用git bash打开文件夹myblog输入:"></a>用git bash打开文件夹myblog输入:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about                        <span class="comment"># 要与上述命名一致</span></span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page schedule</span><br></pre></td></tr></table></figure>
<p>即在source文件夹下创建了对应的md文件</p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>myfirstblog</title>
    <url>/2023/07/11/myfirstblog/</url>
    <content><![CDATA[<p>Hello world! This is my first blog.</p>
<h1 id="该博客主题为hexo的next主题"><a href="#该博客主题为hexo的next主题" class="headerlink" title="该博客主题为hexo的next主题"></a>该博客主题为hexo的next主题</h1><h2 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h2><h3 id="下载好git-node后"><a href="#下载好git-node后" class="headerlink" title="下载好git,node后"></a>下载好git,node后</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init myblog</span><br><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo s                       <span class="comment"># 查看网页</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-theme-next  <span class="comment"># 下载主题</span></span><br></pre></td></tr></table></figure>
<h3 id="打开config文件-修改主题"><a href="#打开config文件-修改主题" class="headerlink" title="打开config文件,修改主题"></a>打开config文件,修改主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络笔记</title>
    <url>/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><p>速率、带宽、吞吐量、时延、时延带宽积、往返时间、利用率、丢包率</p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>应用层、运输层、网际层、网络接口层（数据链路层、物理层）</p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h3><ul>
<li>导引型传输媒体：同轴电缆、双绞线、光纤线、电力线</li>
<li>非导引型传输媒体：无线电波、微波、红外线、可见光</li>
</ul>
<h3 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h3><ul>
<li>串行传播、并行传播</li>
<li>同步传播、异步传播</li>
<li>单工通信、单双工通信、全双工通信</li>
</ul>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>数字基带信号——&gt;数字信道、模拟基带信号——&gt;数字信道</p>
<h3 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h3><p>数字基带信号——&gt;模拟信道、模拟基带信号——&gt;模拟信道</p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><p>奇偶校验、循环冗余校验CRC</p>
<h3 id="可靠运输"><a href="#可靠运输" class="headerlink" title="可靠运输"></a>可靠运输</h3><ul>
<li>停止-等待协议</li>
<li>回退N帧协议</li>
<li>选择重传协议</li>
</ul>
<h3 id="ppp协议（Point-to-Point-Protocol）"><a href="#ppp协议（Point-to-Point-Protocol）" class="headerlink" title="ppp协议（Point to Point Protocol）"></a>ppp协议（<em>Point to Point Protocol</em>）</h3><ul>
<li>封装成帧</li>
<li>链路控制协议LCP（<em>Link Control Protocol</em>）：用于建立、配置与测试数据链路的连接</li>
<li>一套网络层控制协议NCPs：其中的每个协议支持不同的网络层协议</li>
</ul>
<h3 id="媒体接入控制"><a href="#媒体接入控制" class="headerlink" title="媒体接入控制"></a>媒体接入控制</h3><h4 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h4><p>频分复用FDM、时分复用TDM、波分复用WDM、码分复用CDM</p>
<h4 id="动态接入控制"><a href="#动态接入控制" class="headerlink" title="动态接入控制"></a>动态接入控制</h4><ul>
<li>受控接入（已被淘汰）</li>
<li><ul>
<li>集中控制、分散控制</li>
</ul>
</li>
<li>随机接入</li>
<li><ul>
<li>CSDM&#x2F;CD协议（<em>Carrier Sense Multiple Access&#x2F;Collision Detection</em>）：总线型局域网使用</li>
</ul>
</li>
<li><ul>
<li>CSDM&#x2F;CA协议（<em>Carrier Sense Multiple Access&#x2F;Collision Avoidance</em>）：无线型局域网使用</li>
</ul>
</li>
</ul>
<h3 id="地址解析协议ARP（Address-Resolution-Protocol）"><a href="#地址解析协议ARP（Address-Resolution-Protocol）" class="headerlink" title="地址解析协议ARP（Address Resolution Protocol）"></a>地址解析协议ARP（<em>Address Resolution Protocol</em>）</h3><p>由IP地址获取MAC地址</p>
<h3 id="以太网交换机生成树协议STP（Spanning-tree-protocol）"><a href="#以太网交换机生成树协议STP（Spanning-tree-protocol）" class="headerlink" title="以太网交换机生成树协议STP（Spanning-tree protocol）"></a>以太网交换机生成树协议STP（<em>Spanning-tree protocol</em>）</h3><p>寻找最佳路径、避免网络环路产生从而产生广播风暴</p>
<h3 id="虚拟局域网VLAN（Virtual-Local-Area-Network）"><a href="#虚拟局域网VLAN（Virtual-Local-Area-Network）" class="headerlink" title="虚拟局域网VLAN（Virtual Local Area Network）"></a>虚拟局域网VLAN（<em>Virtual Local Area Network</em>）</h3><p>通过给交换机端口打标签来实现</p>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="IPV4"><a href="#IPV4" class="headerlink" title="IPV4"></a>IPV4</h3><ul>
<li>分类编制：A、B、C、D类IP地址</li>
<li>划分子网：使用子网掩码</li>
<li>无分类编制：例如：196.168.0.12&#x2F;16</li>
</ul>
<h3 id="路由选择协议（表示一类协议）"><a href="#路由选择协议（表示一类协议）" class="headerlink" title="路由选择协议（表示一类协议）"></a>路由选择协议（表示一类协议）</h3><h4 id="内部网关协议IGP（Interior-Gateway-Protocol）"><a href="#内部网关协议IGP（Interior-Gateway-Protocol）" class="headerlink" title="内部网关协议IGP（Interior Gateway Protocol）"></a>内部网关协议IGP（<em>Interior Gateway Protocol</em>）</h4><ul>
<li>路由信息协议RIP（<em>Routing Information Protocol</em>）：<br>IGP中最先得到使用的协议之一，选择到达“距离短”的路由</li>
<li>开放最短路径优先OSPF（<em>Open Shortest Path First</em>）：<br>为克服RIP的缺点而开发（除了考虑距离还考虑带宽），基于链路状态，使用OSPF的每个路由器会产生LSA（<em>Link State Advertisement</em>），有一个LSA（<em>Link State Database</em>）c存储LSA，基于LSDB进行最短路径SPF计算，构成各自的路由表。</li>
</ul>
<h4 id="外部网关协议EGP（Exterior-Gateway-Protocol）"><a href="#外部网关协议EGP（Exterior-Gateway-Protocol）" class="headerlink" title="外部网关协议EGP（Exterior Gateway Protocol）"></a>外部网关协议EGP（<em>Exterior Gateway Protocol</em>）</h4><ul>
<li>外部网关协议BGP（<em>Border Gateway Protocol</em>）：<br>每个自治系统的管理员选择至少一个路由作为“发言人”，发言人建立TCP连接来交换路由信息，目前使用最多的EGP是BGP-4。</li>
</ul>
<h3 id="网际控制报文协议ICMP（Internet-Control-Message-Protocol）"><a href="#网际控制报文协议ICMP（Internet-Control-Message-Protocol）" class="headerlink" title="网际控制报文协议ICMP（Internet Control Message Protocol）"></a>网际控制报文协议ICMP（<em>Internet Control Message Protocol</em>）</h3><p>更有效的转发IP数据报和提高交互成功机会。</p>
<h3 id="虚拟专用网VPN（Virtual-Private-Network）"><a href="#虚拟专用网VPN（Virtual-Private-Network）" class="headerlink" title="虚拟专用网VPN（Virtual Private Network）"></a>虚拟专用网VPN（<em>Virtual Private Network</em>）</h3><p>使用IP隧道技术</p>
<h3 id="网络地址转换NAT（Network-Address-translation）"><a href="#网络地址转换NAT（Network-Address-translation）" class="headerlink" title="网络地址转换NAT（Network Address translation）"></a>网络地址转换NAT（<em>Network Address translation</em>）</h3><p>使大量内部专用地址（A类地址： 10.0.0.0–10.255.255.255 ，B类地址： 172.16.0.0–172.31.255.255 ，C类地址： 192.168.0.0–192.168.255.255）的专用网络用户共享少量外部全球地址。</p>
<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>TCP&#x2F;IP体系的运输层使用端口号来区分应用层的不同应用进程，端口号使用16比特表示，取值范围0~65535</p>
<ul>
<li>熟知端口号：0~1023，IANA把这些端口号指派给了TCP&#x2F;IP体系中最重要的一些应用协议，例如FTP使用21&#x2F;20，HTTP使用80，DNS使用53。</li>
<li>登记端口号：1024~49151.为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。</li>
</ul>
<h3 id="UDP（User-Datagram-Protocol）与TCP（Transmission-Control-Protocol）对比"><a href="#UDP（User-Datagram-Protocol）与TCP（Transmission-Control-Protocol）对比" class="headerlink" title="UDP（User Datagram Protocol）与TCP（Transmission Control Protocol）对比"></a>UDP（<em>User Datagram Protocol</em>）与TCP（<em>Transmission Control Protocol</em>）对比</h3><table>
<thead>
<tr>
<th>UDP</th>
<th>TCP</th>
</tr>
</thead>
<tbody><tr>
<td>无连接</td>
<td>面向连接</td>
</tr>
<tr>
<td>支持一对一，一对多，多对一和多交互通信</td>
<td>每一条TCP连接只能有两个端点EP，只能是一对一通信</td>
</tr>
<tr>
<td>对应用层交付的报文直接打包</td>
<td>可靠传输，使用流量控制和拥塞控制</td>
</tr>
<tr>
<td>首部开销小，仅八字节</td>
<td>首部最小20字节，最大60字节</td>
</tr>
</tbody></table>
<h3 id="TCP（Transmission-Control-Protocol）"><a href="#TCP（Transmission-Control-Protocol）" class="headerlink" title="TCP（Transmission Control Protocol）"></a>TCP（<em>Transmission Control Protocol</em>）</h3><h4 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h4><p>目的是让发送方发送速率不要过快，要让接收方来得及接收，利用以字节为单位的滑动窗口机制来实现。TCP接收方利用自己的接收窗口的大小来限制发送方发送窗口的大小，TCP发送方收到接收方的零窗口通知后，应启动持续计时器。持续计时器超时后，向接收方发送零窗口探测报文。</p>
<h4 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h4><ul>
<li>慢开始（<em>slow-start</em>）</li>
<li>拥塞避免（<em>congestion avoidance</em>）</li>
<li>快重传(<em>fast restransmit</em>)</li>
<li>快恢复(<em>fast recovery</em>)</li>
</ul>
<h4 id="TCP的运输连接建立"><a href="#TCP的运输连接建立" class="headerlink" title="TCP的运输连接建立"></a>TCP的运输连接建立</h4><p>通过“三报文握手”建立连接</p>
<h4 id="TCP连接释放"><a href="#TCP连接释放" class="headerlink" title="TCP连接释放"></a>TCP连接释放</h4><p>通过“四报文挥手”释放连接</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="客户-x2F-服务器方式C-x2F-S方式（Client-x2F-Server）和对等方式P2P方式（Peer-to-Peer）"><a href="#客户-x2F-服务器方式C-x2F-S方式（Client-x2F-Server）和对等方式P2P方式（Peer-to-Peer）" class="headerlink" title="客户&#x2F;服务器方式C&#x2F;S方式（Client&#x2F;Server）和对等方式P2P方式（Peer-to-Peer）"></a>客户&#x2F;服务器方式C&#x2F;S方式（<em>Client&#x2F;Server</em>）和对等方式P2P方式（<em>Peer-to-Peer</em>）</h3><ul>
<li>客户是服务请求方，服务器是服务提供方。服务器总是处于运行状态，并等待客户的服务请求。基于C&#x2F;S方式的应用服务通常是服务集中型，因为常会出现服务器计算机更不上众多客户机的请求，在C&#x2F;S应用中，常用计算机群集（或服务器场）构建一个强大的虚拟服务器。</li>
<li>基于P2P的应用是服务分散的,它没有固定的服务请求者和服务提供者，P2P方式最突出的特性之一就是它的可扩展性，其还具有成本上的优势。</li>
</ul>
<h3 id="动态主机配置协议DHCP（Dynamic-Host-Configuration-Protocol）"><a href="#动态主机配置协议DHCP（Dynamic-Host-Configuration-Protocol）" class="headerlink" title="动态主机配置协议DHCP（Dynamic Host Configuration Protocol）"></a>动态主机配置协议DHCP（<em>Dynamic Host Configuration Protocol</em>）</h3><p>作用是自动配置主机的IP地址，子网掩码，默认网关，DNS服务器。每个网络都设置一个DHCP服务器会使DHCP服务器数量太多，因此现在是每一个网络至少有一个DHCP中继代理（通常是一台路由器），DHCP客户在未获取IP地址时会使用地址0.0.0.0。</p>
<h3 id="域名系统DNS（Domain-Name-System）"><a href="#域名系统DNS（Domain-Name-System）" class="headerlink" title="域名系统DNS（Domain Name System）"></a>域名系统DNS（<em>Domain Name System</em>）</h3><p>因特网采用层次树状结构的域名结构，DNS是因特网使用的命名系统，把域名转换为IP地址，域名服务器可划为：根域名服务器，顶级域名服务器，权限域名服务器，本地域名服务器。查询方式有：递归查询，迭代查询。</p>
<h3 id="文件传输协议FTP（File-Transfer-Protocol）"><a href="#文件传输协议FTP（File-Transfer-Protocol）" class="headerlink" title="文件传输协议FTP（File Transfer Protocol）"></a>文件传输协议FTP（<em>File Transfer Protocol</em>）</h3><p>FTP客户和服务器之间建立两个并行的TCP连接</p>
<ul>
<li>控制连接，在整个会话中保持打开，用于传送FTP相关控制命令。</li>
<li>数据连接，用于文件传输，在每次文件传输时才建立，传输结束就关闭。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>测试学习</title>
    <url>/2023/07/26/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>用来促进鉴定软 件的正确性、完整性、安全性和质量的过程；<br>是一种实际输出与预期输出间的审核或者比较过程；<br>使用人工和自动手段来运行或测试某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别；</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>阶段：单元测试、集成测试、系统测试、验收测试、回归测试、Alpha测试、Beta测试</li>
<li>程序运行状态：静态测试、动态测试</li>
<li>方法：白盒测试、黑盒测试、灰盒测试</li>
<li>服务类型：移动端、PC端、B&#x2F;S、C&#x2F;S</li>
<li>内容：功能测试、负载测试、压力测试、性能测试、大数据测试、易用性测试、安装测试、恢复测试、安全性测试、兼容性测试、内存泄漏测试、比较测试、可靠性测试、文档测试</li>
</ul>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul>
<li>需求分析和评审</li>
<li>编写测试计划</li>
<li>编写测试用例并进行评审</li>
<li>执行测试、提交bug、回归测试</li>
<li>编写测试总结报告</li>
</ul>
<h2 id="测试用例的设计"><a href="#测试用例的设计" class="headerlink" title="测试用例的设计"></a>测试用例的设计</h2><p>等价类划分，边界值分析，因果图，判定表，正交表，场景法，错误分析，错误推断</p>
<h2 id="测试用例编写"><a href="#测试用例编写" class="headerlink" title="测试用例编写"></a>测试用例编写</h2><ul>
<li>需求分析和评审</li>
<li>编写测试用例</li>
<li>测试用例评审</li>
<li>执行测试用例，提交缺陷报告，bug处理好后进行回归测试</li>
<li>编写测试报告，对产品进行评估</li>
</ul>
<h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><p>用例编号，用例标题，测试项目，优先度，前置条件，测试输入，执行步骤，预期结果······</p>
<h2 id="缺陷报告"><a href="#缺陷报告" class="headerlink" title="缺陷报告"></a>缺陷报告</h2><p>缺陷编号，缺陷标题，缺陷的严重程度，缺陷的优先级，缺陷所属模块，缺陷详细描述，缺陷记录人，缺陷处理人······</p>
<h2 id="缺陷状态"><a href="#缺陷状态" class="headerlink" title="缺陷状态"></a>缺陷状态</h2><p>new,assigned,open,fixed,closed,reopen(回归测试失败，再次打开),postpone,duplicate(与提交的Defect重复),reject </p>
<h2 id="Python包"><a href="#Python包" class="headerlink" title="Python包"></a>Python包</h2><p>selenium，appium，pytest，unitest</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>postman，JMeter，禅道</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>一些笔记</title>
    <url>/2023/08/13/%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="进程、线程、协程："><a href="#进程、线程、协程：" class="headerlink" title="进程、线程、协程："></a>进程、线程、协程：</h3><ul>
<li>进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位，进程之间是独立的地址空间。</li>
<li>线程：是进程的一个执行单元，是进程内调度实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，线程共享本进程的地址空间。</li>
<li>协程：是一种比线程更加轻量级的存在。一个线程也可以拥有多个协程。其执行过程更类似于子例程，或者说不带返回值的函数调用。</li>
</ul>
<h3 id="弱网测试"><a href="#弱网测试" class="headerlink" title="弱网测试"></a>弱网测试</h3><p>弱网测试，属于健壮性测试范畴。</p>
<h4 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h4><ol>
<li>用户体验。app使用过程中，弱网的高延迟和高丢包，在实时性要求非常高的场景，容易损失用户体验。</li>
<li>非正常情况下，出现bug概率会增加。在日常需求中，经常会遇到一些用户反馈一些无法简单复现的bug，有很大一部分的bug是由于用户自身的网络环境波动，或者是本身网络环境就较为恶劣。而服务面对这种恶劣的网络环境的健壮性不够，导致会出现一些意想不到的bug。</li>
</ol>
<h4 id="弱网测试指标"><a href="#弱网测试指标" class="headerlink" title="弱网测试指标"></a>弱网测试指标</h4><ol>
<li>带宽（吞吐量）：单位时间内传输的数据量，单位通常是：每秒比特数：bps。带宽反映了网络的传输能力，越大越好。</li>
<li>丢包：数据丢包个数&#x3D;发送的数据包数-接收的数据包数。丢包反映了网络可靠性，越小越好。</li>
<li>时延：数据包从发送开始到接收到该数据，所耗费的时间，单位通常是ms。时延反映了网络的速度，越小越好。</li>
<li>抖动：指时延的变化，即两个数据包时延的差值。抖动反映了网络的稳定性，越小越好。</li>
<li>乱序：指接收到的数据包顺序和发送顺序不一致的次数。乱序反映了网络的稳定性，越小越好。当乱序比较严重的时候，丢包也会比较严重，所以一般都以丢包指标为主，忽略乱序指标。</li>
</ol>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>性能测试是通过自动化的测试工具模拟多种正常峰值及异常负载条件来对系统的各项性能指标进行测试。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol>
<li>负载测试（Load Testing）:负载测试是指通过测试系统在资源超负荷情况下的表现，来发现设计上的错误或验证系统的负载能力。这种测试中，将使测试对象承担不同的工作量，以评测和评估测试对象在不同工作量条件下的性能行为，以及持续正常运行的能力。负载测试的目标是确定并确保系统在超出最大预期工作量的情况下仍能正常运行。此外，负载测试还要评估性能特征，如响应时长、事物处理速度和其他与时间相关的性能指标。</li>
<li>压力测试（Stress Testing）：在软件工程中，压力测试是对系统不断施加压力的测试，是通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。例如测试一个Web站点在大量的负荷下，何时系统的响应会退化或失败。</li>
<li>容量测试（Volume Testing）：容量测试确定系统可处理同时在线的最大用户数。</li>
</ol>
<h4 id="常见指标"><a href="#常见指标" class="headerlink" title="常见指标"></a>常见指标</h4><p>系统测试</p>
<ol>
<li>响应时间</li>
<li>并发</li>
<li>点击量&#x2F;点击率</li>
<li>吞吐量&#x2F;吞吐率</li>
<li>TPS&#x2F;QPS（Transactions Per Second 每秒事务数&#x2F;Queries Per Second 每秒查询率）</li>
<li>PV&#x2F;UV（Unique visitor 用户访问&#x2F;Page View 页面浏览量或点击量）</li>
</ol>
<p>对于C&#x2F;S架构的程序，由于软件后台通常为数据库，所以我们更注意数据库的测试指标。</p>
<ol>
<li>User Connections：用户连接数，也就是数据库的连接数量</li>
<li>Number of Deadlocks：数据库死锁</li>
<li>Butter Cache Hit :数据库Cache的命中情况</li>
</ol>
<p>对于服务器，还有</p>
<ol>
<li>CPU使用率</li>
<li>内存占用率</li>
<li>磁盘IO</li>
<li>系统平均负载</li>
</ol>
<h3 id="从需求分析到设计测试用例需考虑"><a href="#从需求分析到设计测试用例需考虑" class="headerlink" title="从需求分析到设计测试用例需考虑"></a>从需求分析到设计测试用例需考虑</h3><ol>
<li>理解需求</li>
<li>需求分析<ol>
<li>寻找关键词</li>
<li>寻找影响因素</li>
<li>寻找检查项</li>
<li>输出用例场景</li>
</ol>
</li>
<li>收集反馈</li>
</ol>
<h3 id="单元测试、集成测试、系统测试、验收测试、回归测试"><a href="#单元测试、集成测试、系统测试、验收测试、回归测试" class="headerlink" title="单元测试、集成测试、系统测试、验收测试、回归测试"></a>单元测试、集成测试、系统测试、验收测试、回归测试</h3><ol>
<li>单元测试：单元测试又称模块测试，是就是对程序代码中最小的涉及模块单元进行测试。目的是检测软件模块单元的正确性。</li>
<li>集成测试：集成测试又称组装测试，是将软件产品各个模块组装起来，目的是检验软件接口中是否正确性，以及组装后的整体功能、性能表现。</li>
<li>系统测试：系统测试是对已经集成的好的系统进行彻底的测试，以验证软件系统的正确性和性能是否满足其所指定的要求。</li>
<li>验收测试：验收测试是部署软件的最后的一个测试操作，验收测测试的目的是确保软件的准备就绪，向软件购买展示软件系统满足其用户的需求。</li>
<li>回归测试：回归测试是指在发生修改之后重新测试先前的测试用例以保证修改的正确性。</li>
</ol>
<h3 id="通用测试用例八要素"><a href="#通用测试用例八要素" class="headerlink" title="通用测试用例八要素"></a>通用测试用例八要素</h3><ol>
<li>用例编号</li>
<li>测试项目</li>
<li>测试标题</li>
<li>重要级别</li>
<li>预置条件</li>
<li>测试输入 　　</li>
<li>操作步骤</li>
<li>预期输出</li>
</ol>
<h3 id="黑盒测试方法"><a href="#黑盒测试方法" class="headerlink" title="黑盒测试方法"></a>黑盒测试方法</h3><ol>
<li>等价类划分</li>
<li>边界值分析</li>
<li>错误推测</li>
<li>因果图分析</li>
<li>判定表驱动分析</li>
<li>正交表驱动分析</li>
<li>功能图分析</li>
<li>场景设计</li>
</ol>
<h3 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h3><ol>
<li>静态代码审查</li>
<li>动态渗透测试</li>
<li>扫描程序中的数据<br>从用户认证、网络、数据库和Web 四个角度进行安全性测试，需要注意以下几个方面：</li>
<li>用户认证安全性测试</li>
<li>网络安全性测试</li>
<li>数据库安全性测试</li>
<li>Web 安全性测试</li>
</ol>
<h3 id="从实现的功能方面看，CPU大致可分为如下八个逻辑单元"><a href="#从实现的功能方面看，CPU大致可分为如下八个逻辑单元" class="headerlink" title="从实现的功能方面看，CPU大致可分为如下八个逻辑单元"></a>从实现的功能方面看，CPU大致可分为如下八个逻辑单元</h3><ol>
<li>指令高速缓存，俗称指令寄存器</li>
<li>译码单元，俗称指令译码器</li>
<li>控制单元</li>
<li>寄存器</li>
<li>逻辑运算单元（ALU）</li>
<li>预取单元</li>
<li>总线单元</li>
<li>数据高速缓存<br>在CPU中至少要有六类寄存器：指令寄存器（IR）、程序计数器（PC）、地址寄存器（AR）、数据寄存器（DR）、累加寄存器（AC）、程序状态字寄存器（PSW）</li>
</ol>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>Redis全称为Remote Dictionary Server（远程数据服务），是一款开源的基于内存的键值对存储系统，其主要被用作高性能缓存服务器使用，当然也可以作为消息中间件和Session共享等。Redis独特的键值对模型使之支持丰富的数据结构类型，即它的值可以是字符串、哈希、列表、集合、有序集合，而不像Memcached要求的键和值都是字符串。同时由于Redis是基于内存的方式，免去了磁盘I&#x2F;O速度的影响，因此其读写性能极高</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。</p>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。</p>
<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>我们使用Redis大部分情况都是通过Key查询对应的值，假如发送的请求传进来的key是不存在Redis中的，那么就查不到缓存，查不到缓存就会去数据库查询。假如有大量这样的请求，这些请求像“穿透”了缓存一样直接打在数据库上，这种现象就叫做缓存穿透。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
